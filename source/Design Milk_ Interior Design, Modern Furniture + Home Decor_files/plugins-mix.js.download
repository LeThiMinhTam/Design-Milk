(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports;}
var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports;}
__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter});}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module['default'];}:function getModuleExports(){return module;};__webpack_require__.d(getter,'a',getter);return getter;};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};__webpack_require__.p="/";return __webpack_require__(__webpack_require__.s=1);})
({"./js/source/plugins.js":(function(module,exports){eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// Avoid `console` errors in browsers that lack a console.\n(function () {\n    var method;\n    var noop = function noop() {};\n    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];\n    var length = methods.length;\n    var console = window.console = window.console || {};\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n})();\n\n/*\n * jQuery FlexSlider v2.1\n * http://www.woothemes.com/flexslider/\n *\n * Copyright 2012 WooThemes\n * Free to use under the GPLv2 license.\n * http://www.gnu.org/licenses/gpl-2.0.html\n *\n * Contributing author: Tyler Smith (@mbmufffin)\n */\n(function (d) {\n    d.flexslider = function (j, l) {\n        var a = d(j),\n            c = d.extend({}, d.flexslider.defaults, l),\n            e = c.namespace,\n            q = \"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch,\n            u = q ? \"touchend\" : \"click\",\n            m = \"vertical\" === c.direction,\n            n = c.reverse,\n            h = 0 < c.itemWidth,\n            s = \"fade\" === c.animation,\n            t = \"\" !== c.asNavFor,\n            f = {};d.data(j, \"flexslider\", a);f = { init: function init() {\n                a.animating = !1;a.currentSlide = c.startAt;a.animatingTo = a.currentSlide;a.atEnd = 0 === a.currentSlide || a.currentSlide === a.last;a.containerSelector = c.selector.substr(0, c.selector.search(\" \"));a.slides = d(c.selector, a);a.container = d(a.containerSelector, a);a.count = a.slides.length;a.syncExists = 0 < d(c.sync).length;\"slide\" === c.animation && (c.animation = \"swing\");a.prop = m ? \"top\" : \"marginLeft\";a.args = {};a.manualPause = !1;var b = a,\n                    g;if (g = !c.video) if (g = !s) if (g = c.useCSS) a: {\n                    g = document.createElement(\"div\");var p = [\"perspectiveProperty\", \"WebkitPerspective\", \"MozPerspective\", \"OPerspective\", \"msPerspective\"],\n                        e;for (e in p) {\n                        if (void 0 !== g.style[p[e]]) {\n                            a.pfx = p[e].replace(\"Perspective\", \"\").toLowerCase();\n                            a.prop = \"-\" + a.pfx + \"-transform\";g = !0;break a;\n                        }\n                    }g = !1;\n                }b.transitions = g;\"\" !== c.controlsContainer && (a.controlsContainer = 0 < d(c.controlsContainer).length && d(c.controlsContainer));\"\" !== c.manualControls && (a.manualControls = 0 < d(c.manualControls).length && d(c.manualControls));c.randomize && (a.slides.sort(function () {\n                    return Math.round(Math.random()) - 0.5;\n                }), a.container.empty().append(a.slides));a.doMath();t && f.asNav.setup();a.setup(\"init\");c.controlNav && f.controlNav.setup();c.directionNav && f.directionNav.setup();c.keyboard && (1 === d(a.containerSelector).length || c.multipleKeyboard) && d(document).bind(\"keyup\", function (b) {\n                    b = b.keyCode;if (!a.animating && (39 === b || 37 === b)) b = 39 === b ? a.getTarget(\"next\") : 37 === b ? a.getTarget(\"prev\") : !1, a.flexAnimate(b, c.pauseOnAction);\n                });c.mousewheel && a.bind(\"mousewheel\", function (b, g) {\n                    b.preventDefault();var d = 0 > g ? a.getTarget(\"next\") : a.getTarget(\"prev\");a.flexAnimate(d, c.pauseOnAction);\n                });c.pausePlay && f.pausePlay.setup();c.slideshow && (c.pauseOnHover && a.hover(function () {\n                    !a.manualPlay && !a.manualPause && a.pause();\n                }, function () {\n                    !a.manualPause && !a.manualPlay && a.play();\n                }), 0 < c.initDelay ? setTimeout(a.play, c.initDelay) : a.play());q && c.touch && f.touch();(!s || s && c.smoothHeight) && d(window).bind(\"resize focus\", f.resize);setTimeout(function () {\n                    c.start(a);\n                }, 200);\n            }, asNav: { setup: function setup() {\n                    a.asNav = !0;a.animatingTo = Math.floor(a.currentSlide / a.move);a.currentItem = a.currentSlide;a.slides.removeClass(e + \"active-slide\").eq(a.currentItem).addClass(e + \"active-slide\");a.slides.click(function (b) {\n                        b.preventDefault();b = d(this);var g = b.index();\n                        !d(c.asNavFor).data(\"flexslider\").animating && !b.hasClass(\"active\") && (a.direction = a.currentItem < g ? \"next\" : \"prev\", a.flexAnimate(g, c.pauseOnAction, !1, !0, !0));\n                    });\n                } }, controlNav: { setup: function setup() {\n                    a.manualControls ? f.controlNav.setupManual() : f.controlNav.setupPaging();\n                }, setupPaging: function setupPaging() {\n                    var b = 1,\n                        g;a.controlNavScaffold = d('<ol class=\"' + e + \"control-nav \" + e + (\"thumbnails\" === c.controlNav ? \"control-thumbs\" : \"control-paging\") + '\"></ol>');if (1 < a.pagingCount) for (var p = 0; p < a.pagingCount; p++) {\n                        g = \"thumbnails\" === c.controlNav ? '<img src=\"' + a.slides.eq(p).attr(\"data-thumb\") + '\"/>' : \"<a>\" + b + \"</a>\", a.controlNavScaffold.append(\"<li>\" + g + \"</li>\"), b++;\n                    }a.controlsContainer ? d(a.controlsContainer).append(a.controlNavScaffold) : a.append(a.controlNavScaffold);f.controlNav.set();f.controlNav.active();a.controlNavScaffold.delegate(\"a, img\", u, function (b) {\n                        b.preventDefault();b = d(this);var g = a.controlNav.index(b);b.hasClass(e + \"active\") || (a.direction = g > a.currentSlide ? \"next\" : \"prev\", a.flexAnimate(g, c.pauseOnAction));\n                    });q && a.controlNavScaffold.delegate(\"a\", \"click touchstart\", function (a) {\n                        a.preventDefault();\n                    });\n                }, setupManual: function setupManual() {\n                    a.controlNav = a.manualControls;f.controlNav.active();a.controlNav.live(u, function (b) {\n                        b.preventDefault();b = d(this);var g = a.controlNav.index(b);b.hasClass(e + \"active\") || (g > a.currentSlide ? a.direction = \"next\" : a.direction = \"prev\", a.flexAnimate(g, c.pauseOnAction));\n                    });q && a.controlNav.live(\"click touchstart\", function (a) {\n                        a.preventDefault();\n                    });\n                }, set: function set() {\n                    a.controlNav = d(\".\" + e + \"control-nav li \" + (\"thumbnails\" === c.controlNav ? \"img\" : \"a\"), a.controlsContainer ? a.controlsContainer : a);\n                }, active: function active() {\n                    a.controlNav.removeClass(e + \"active\").eq(a.animatingTo).addClass(e + \"active\");\n                }, update: function update(b, c) {\n                    1 < a.pagingCount && \"add\" === b ? a.controlNavScaffold.append(d(\"<li><a>\" + a.count + \"</a></li>\")) : 1 === a.pagingCount ? a.controlNavScaffold.find(\"li\").remove() : a.controlNav.eq(c).closest(\"li\").remove();f.controlNav.set();1 < a.pagingCount && a.pagingCount !== a.controlNav.length ? a.update(c, b) : f.controlNav.active();\n                } }, directionNav: { setup: function setup() {\n                    var b = d('<ul class=\"' + e + 'direction-nav\"><li><a class=\"' + e + 'prev\" href=\"#\">' + c.prevText + '</a></li><li><a class=\"' + e + 'next\" href=\"#\">' + c.nextText + \"</a></li></ul>\");a.controlsContainer ? (d(a.controlsContainer).append(b), a.directionNav = d(\".\" + e + \"direction-nav li a\", a.controlsContainer)) : (a.append(b), a.directionNav = d(\".\" + e + \"direction-nav li a\", a));f.directionNav.update();a.directionNav.bind(u, function (b) {\n                        b.preventDefault();b = d(this).hasClass(e + \"next\") ? a.getTarget(\"next\") : a.getTarget(\"prev\");a.flexAnimate(b, c.pauseOnAction);\n                    });\n                    q && a.directionNav.bind(\"click touchstart\", function (a) {\n                        a.preventDefault();\n                    });\n                }, update: function update() {\n                    var b = e + \"disabled\";1 === a.pagingCount ? a.directionNav.addClass(b) : c.animationLoop ? a.directionNav.removeClass(b) : 0 === a.animatingTo ? a.directionNav.removeClass(b).filter(\".\" + e + \"prev\").addClass(b) : a.animatingTo === a.last ? a.directionNav.removeClass(b).filter(\".\" + e + \"next\").addClass(b) : a.directionNav.removeClass(b);\n                } }, pausePlay: { setup: function setup() {\n                    var b = d('<div class=\"' + e + 'pauseplay\"><a></a></div>');a.controlsContainer ? (a.controlsContainer.append(b), a.pausePlay = d(\".\" + e + \"pauseplay a\", a.controlsContainer)) : (a.append(b), a.pausePlay = d(\".\" + e + \"pauseplay a\", a));f.pausePlay.update(c.slideshow ? e + \"pause\" : e + \"play\");a.pausePlay.bind(u, function (b) {\n                        b.preventDefault();d(this).hasClass(e + \"pause\") ? (a.manualPause = !0, a.manualPlay = !1, a.pause()) : (a.manualPause = !1, a.manualPlay = !0, a.play());\n                    });q && a.pausePlay.bind(\"click touchstart\", function (a) {\n                        a.preventDefault();\n                    });\n                }, update: function update(b) {\n                    \"play\" === b ? a.pausePlay.removeClass(e + \"pause\").addClass(e + \"play\").text(c.playText) : a.pausePlay.removeClass(e + \"play\").addClass(e + \"pause\").text(c.pauseText);\n                } }, touch: function touch() {\n                function b(b) {\n                    k = m ? d - b.touches[0].pageY : d - b.touches[0].pageX;q = m ? Math.abs(k) < Math.abs(b.touches[0].pageX - e) : Math.abs(k) < Math.abs(b.touches[0].pageY - e);if (!q || 500 < Number(new Date()) - l) b.preventDefault(), !s && a.transitions && (c.animationLoop || (k /= 0 === a.currentSlide && 0 > k || a.currentSlide === a.last && 0 < k ? Math.abs(k) / r + 2 : 1), a.setProps(f + k, \"setTouch\"));\n                }function g() {\n                    j.removeEventListener(\"touchmove\", b, !1);if (a.animatingTo === a.currentSlide && !q && null !== k) {\n                        var h = n ? -k : k,\n                            m = 0 < h ? a.getTarget(\"next\") : a.getTarget(\"prev\");a.canAdvance(m) && (550 > Number(new Date()) - l && 50 < Math.abs(h) || Math.abs(h) > r / 2) ? a.flexAnimate(m, c.pauseOnAction) : s || a.flexAnimate(a.currentSlide, c.pauseOnAction, !0);\n                    }j.removeEventListener(\"touchend\", g, !1);f = k = e = d = null;\n                }var d,\n                    e,\n                    f,\n                    r,\n                    k,\n                    l,\n                    q = !1;j.addEventListener(\"touchstart\", function (k) {\n                    a.animating ? k.preventDefault() : 1 === k.touches.length && (a.pause(), r = m ? a.h : a.w, l = Number(new Date()), f = h && n && a.animatingTo === a.last ? 0 : h && n ? a.limit - (a.itemW + c.itemMargin) * a.move * a.animatingTo : h && a.currentSlide === a.last ? a.limit : h ? (a.itemW + c.itemMargin) * a.move * a.currentSlide : n ? (a.last - a.currentSlide + a.cloneOffset) * r : (a.currentSlide + a.cloneOffset) * r, d = m ? k.touches[0].pageY : k.touches[0].pageX, e = m ? k.touches[0].pageX : k.touches[0].pageY, j.addEventListener(\"touchmove\", b, !1), j.addEventListener(\"touchend\", g, !1));\n                }, !1);\n            }, resize: function resize() {\n                !a.animating && a.is(\":visible\") && (h || a.doMath(), s ? f.smoothHeight() : h ? (a.slides.width(a.computedW), a.update(a.pagingCount), a.setProps()) : m ? (a.viewport.height(a.h), a.setProps(a.h, \"setTotal\")) : (c.smoothHeight && f.smoothHeight(), a.newSlides.width(a.computedW), a.setProps(a.computedW, \"setTotal\")));\n            }, smoothHeight: function smoothHeight(b) {\n                if (!m || s) {\n                    var c = s ? a : a.viewport;b ? c.animate({ height: a.slides.eq(a.animatingTo).height() }, b) : c.height(a.slides.eq(a.animatingTo).height());\n                }\n            }, sync: function sync(b) {\n                var g = d(c.sync).data(\"flexslider\"),\n                    e = a.animatingTo;switch (b) {case \"animate\":\n                        g.flexAnimate(e, c.pauseOnAction, !1, !0);break;case \"play\":\n                        !g.playing && !g.asNav && g.play();break;case \"pause\":\n                        g.pause();}\n            } };a.flexAnimate = function (b, g, p, j, l) {\n            t && 1 === a.pagingCount && (a.direction = a.currentItem < b ? \"next\" : \"prev\");if (!a.animating && (a.canAdvance(b, l) || p) && a.is(\":visible\")) {\n                if (t && j) if (p = d(c.asNavFor).data(\"flexslider\"), a.atEnd = 0 === b || b === a.count - 1, p.flexAnimate(b, !0, !1, !0, l), a.direction = a.currentItem < b ? \"next\" : \"prev\", p.direction = a.direction, Math.ceil((b + 1) / a.visible) - 1 !== a.currentSlide && 0 !== b) a.currentItem = b, a.slides.removeClass(e + \"active-slide\").eq(b).addClass(e + \"active-slide\"), b = Math.floor(b / a.visible);else return a.currentItem = b, a.slides.removeClass(e + \"active-slide\").eq(b).addClass(e + \"active-slide\"), !1;a.animating = !0;a.animatingTo = b;c.before(a);g && a.pause();a.syncExists && !l && f.sync(\"animate\");c.controlNav && f.controlNav.active();h || a.slides.removeClass(e + \"active-slide\").eq(b).addClass(e + \"active-slide\");a.atEnd = 0 === b || b === a.last;c.directionNav && f.directionNav.update();b === a.last && (c.end(a), c.animationLoop || a.pause());if (s) q ? (a.slides.eq(a.currentSlide).css({ opacity: 0,\n                    zIndex: 1 }), a.slides.eq(b).css({ opacity: 1, zIndex: 2 }), a.slides.unbind(\"webkitTransitionEnd transitionend\"), a.slides.eq(a.currentSlide).bind(\"webkitTransitionEnd transitionend\", function () {\n                    c.after(a);\n                }), a.animating = !1, a.currentSlide = a.animatingTo) : (a.slides.eq(a.currentSlide).fadeOut(c.animationSpeed, c.easing), a.slides.eq(b).fadeIn(c.animationSpeed, c.easing, a.wrapup));else {\n                    var r = m ? a.slides.filter(\":first\").height() : a.computedW;h ? (b = c.itemWidth > a.w ? 2 * c.itemMargin : c.itemMargin, b = (a.itemW + b) * a.move * a.animatingTo, b = b > a.limit && 1 !== a.visible ? a.limit : b) : b = 0 === a.currentSlide && b === a.count - 1 && c.animationLoop && \"next\" !== a.direction ? n ? (a.count + a.cloneOffset) * r : 0 : a.currentSlide === a.last && 0 === b && c.animationLoop && \"prev\" !== a.direction ? n ? 0 : (a.count + 1) * r : n ? (a.count - 1 - b + a.cloneOffset) * r : (b + a.cloneOffset) * r;a.setProps(b, \"\", c.animationSpeed);if (a.transitions) {\n                        if (!c.animationLoop || !a.atEnd) a.animating = !1, a.currentSlide = a.animatingTo;a.container.unbind(\"webkitTransitionEnd transitionend\");a.container.bind(\"webkitTransitionEnd transitionend\", function () {\n                            a.wrapup(r);\n                        });\n                    } else a.container.animate(a.args, c.animationSpeed, c.easing, function () {\n                        a.wrapup(r);\n                    });\n                }c.smoothHeight && f.smoothHeight(c.animationSpeed);\n            }\n        };a.wrapup = function (b) {\n            !s && !h && (0 === a.currentSlide && a.animatingTo === a.last && c.animationLoop ? a.setProps(b, \"jumpEnd\") : a.currentSlide === a.last && 0 === a.animatingTo && c.animationLoop && a.setProps(b, \"jumpStart\"));a.animating = !1;a.currentSlide = a.animatingTo;c.after(a);\n        };a.animateSlides = function () {\n            a.animating || a.flexAnimate(a.getTarget(\"next\"));\n        };a.pause = function () {\n            clearInterval(a.animatedSlides);a.playing = !1;c.pausePlay && f.pausePlay.update(\"play\");a.syncExists && f.sync(\"pause\");\n        };a.play = function () {\n            a.animatedSlides = setInterval(a.animateSlides, c.slideshowSpeed);a.playing = !0;c.pausePlay && f.pausePlay.update(\"pause\");a.syncExists && f.sync(\"play\");\n        };a.canAdvance = function (b, g) {\n            var d = t ? a.pagingCount - 1 : a.last;return g ? !0 : t && a.currentItem === a.count - 1 && 0 === b && \"prev\" === a.direction ? !0 : t && 0 === a.currentItem && b === a.pagingCount - 1 && \"next\" !== a.direction ? !1 : b === a.currentSlide && !t ? !1 : c.animationLoop ? !0 : a.atEnd && 0 === a.currentSlide && b === d && \"next\" !== a.direction ? !1 : a.atEnd && a.currentSlide === d && 0 === b && \"next\" === a.direction ? !1 : !0;\n        };a.getTarget = function (b) {\n            a.direction = b;return \"next\" === b ? a.currentSlide === a.last ? 0 : a.currentSlide + 1 : 0 === a.currentSlide ? a.last : a.currentSlide - 1;\n        };a.setProps = function (b, g, d) {\n            var e,\n                f = b ? b : (a.itemW + c.itemMargin) * a.move * a.animatingTo;e = -1 * function () {\n                if (h) return \"setTouch\" === g ? b : n && a.animatingTo === a.last ? 0 : n ? a.limit - (a.itemW + c.itemMargin) * a.move * a.animatingTo : a.animatingTo === a.last ? a.limit : f;switch (g) {case \"setTotal\":\n                        return n ? (a.count - 1 - a.currentSlide + a.cloneOffset) * b : (a.currentSlide + a.cloneOffset) * b;case \"setTouch\":\n                        return b;case \"jumpEnd\":\n                        return n ? b : a.count * b;case \"jumpStart\":\n                        return n ? a.count * b : b;default:\n                        return b;}\n            }() + \"px\";a.transitions && (e = m ? \"translate3d(0,\" + e + \",0)\" : \"translate3d(\" + e + \",0,0)\", d = void 0 !== d ? d / 1E3 + \"s\" : \"0s\", a.container.css(\"-\" + a.pfx + \"-transition-duration\", d));a.args[a.prop] = e;(a.transitions || void 0 === d) && a.container.css(a.args);\n        };a.setup = function (b) {\n            if (s) a.slides.css({ width: \"100%\",\n                \"float\": \"left\", marginRight: \"-100%\", position: \"relative\" }), \"init\" === b && (q ? a.slides.css({ opacity: 0, display: \"block\", webkitTransition: \"opacity \" + c.animationSpeed / 1E3 + \"s ease\", zIndex: 1 }).eq(a.currentSlide).css({ opacity: 1, zIndex: 2 }) : a.slides.eq(a.currentSlide).fadeIn(c.animationSpeed, c.easing)), c.smoothHeight && f.smoothHeight();else {\n                var g, p;\"init\" === b && (a.viewport = d('<div class=\"' + e + 'viewport\"></div>').css({ overflow: \"hidden\", position: \"relative\" }).appendTo(a).append(a.container), a.cloneCount = 0, a.cloneOffset = 0, n && (p = d.makeArray(a.slides).reverse(), a.slides = d(p), a.container.empty().append(a.slides)));c.animationLoop && !h && (a.cloneCount = 2, a.cloneOffset = 1, \"init\" !== b && a.container.find(\".clone\").remove(), a.container.append(a.slides.first().clone().addClass(\"clone\")).prepend(a.slides.last().clone().addClass(\"clone\")));a.newSlides = d(c.selector, a);g = n ? a.count - 1 - a.currentSlide + a.cloneOffset : a.currentSlide + a.cloneOffset;m && !h ? (a.container.height(200 * (a.count + a.cloneCount) + \"%\").css(\"position\", \"absolute\").width(\"100%\"), setTimeout(function () {\n                    a.newSlides.css({ display: \"block\" });a.doMath();a.viewport.height(a.h);a.setProps(g * a.h, \"init\");\n                }, \"init\" === b ? 100 : 0)) : (a.container.width(200 * (a.count + a.cloneCount) + \"%\"), a.setProps(g * a.computedW, \"init\"), setTimeout(function () {\n                    a.doMath();a.newSlides.css({ width: a.computedW, \"float\": \"left\", display: \"block\" });c.smoothHeight && f.smoothHeight();\n                }, \"init\" === b ? 100 : 0));\n            }h || a.slides.removeClass(e + \"active-slide\").eq(a.currentSlide).addClass(e + \"active-slide\");\n        };a.doMath = function () {\n            var b = a.slides.first(),\n                d = c.itemMargin,\n                e = c.minItems,\n                f = c.maxItems;a.w = a.width();a.h = b.height();a.boxPadding = b.outerWidth() - b.width();h ? (a.itemT = c.itemWidth + d, a.minW = e ? e * a.itemT : a.w, a.maxW = f ? f * a.itemT : a.w, a.itemW = a.minW > a.w ? (a.w - d * e) / e : a.maxW < a.w ? (a.w - d * f) / f : c.itemWidth > a.w ? a.w : c.itemWidth, a.visible = Math.floor(a.w / (a.itemW + d)), a.move = 0 < c.move && c.move < a.visible ? c.move : a.visible, a.pagingCount = Math.ceil((a.count - a.visible) / a.move + 1), a.last = a.pagingCount - 1, a.limit = 1 === a.pagingCount ? 0 : c.itemWidth > a.w ? (a.itemW + 2 * d) * a.count - a.w - d : (a.itemW + d) * a.count - a.w - d) : (a.itemW = a.w, a.pagingCount = a.count, a.last = a.count - 1);a.computedW = a.itemW - a.boxPadding;\n        };a.update = function (b, d) {\n            a.doMath();h || (b < a.currentSlide ? a.currentSlide += 1 : b <= a.currentSlide && 0 !== b && (a.currentSlide -= 1), a.animatingTo = a.currentSlide);if (c.controlNav && !a.manualControls) if (\"add\" === d && !h || a.pagingCount > a.controlNav.length) f.controlNav.update(\"add\");else if (\"remove\" === d && !h || a.pagingCount < a.controlNav.length) h && a.currentSlide > a.last && (a.currentSlide -= 1, a.animatingTo -= 1), f.controlNav.update(\"remove\", a.last);c.directionNav && f.directionNav.update();\n        };a.addSlide = function (b, e) {\n            var f = d(b);a.count += 1;a.last = a.count - 1;m && n ? void 0 !== e ? a.slides.eq(a.count - e).after(f) : a.container.prepend(f) : void 0 !== e ? a.slides.eq(e).before(f) : a.container.append(f);a.update(e, \"add\");a.slides = d(c.selector + \":not(.clone)\", a);a.setup();c.added(a);\n        };a.removeSlide = function (b) {\n            var e = isNaN(b) ? a.slides.index(d(b)) : b;a.count -= 1;a.last = a.count - 1;isNaN(b) ? d(b, a.slides).remove() : m && n ? a.slides.eq(a.last).remove() : a.slides.eq(b).remove();a.doMath();a.update(e, \"remove\");a.slides = d(c.selector + \":not(.clone)\", a);a.setup();c.removed(a);\n        };f.init();\n    };d.flexslider.defaults = { namespace: \"flex-\", selector: \".slides > li\", animation: \"fade\", easing: \"swing\", direction: \"horizontal\", reverse: !1, animationLoop: !0, smoothHeight: !1, startAt: 0, slideshow: !0, slideshowSpeed: 7E3, animationSpeed: 600, initDelay: 0, randomize: !1, pauseOnAction: !0, pauseOnHover: !1, useCSS: !0, touch: !0, video: !1, controlNav: !0, directionNav: !0, prevText: \"Previous\", nextText: \"Next\",\n        keyboard: !0, multipleKeyboard: !1, mousewheel: !1, pausePlay: !1, pauseText: \"Pause\", playText: \"Play\", controlsContainer: \"\", manualControls: \"\", sync: \"\", asNavFor: \"\", itemWidth: 0, itemMargin: 0, minItems: 0, maxItems: 0, move: 0, start: function start() {}, before: function before() {}, after: function after() {}, end: function end() {}, added: function added() {}, removed: function removed() {} };d.fn.flexslider = function (j) {\n        void 0 === j && (j = {});if (\"object\" === (typeof j === 'undefined' ? 'undefined' : _typeof(j))) return this.each(function () {\n            var a = d(this),\n                c = a.find(j.selector ? j.selector : \".slides > li\");1 === c.length ? (c.fadeIn(400), j.start && j.start(a)) : void 0 == a.data(\"flexslider\") && new d.flexslider(this, j);\n        });var l = d(this).data(\"flexslider\");switch (j) {case \"play\":\n                l.play();break;case \"pause\":\n                l.pause();break;case \"next\":\n                l.flexAnimate(l.getTarget(\"next\"), !0);break;case \"prev\":case \"previous\":\n                l.flexAnimate(l.getTarget(\"prev\"), !0);break;default:\n                \"number\" === typeof j && l.flexAnimate(j, !0);}\n    };\n})(jQuery);\n\n/*!\n *  Sharrre.com - Make your sharing widget!\n *  Version: beta 1.3.5\n *  Author: Julien Hany\n *  License: MIT http://en.wikipedia.org/wiki/MIT_License or GPLv2 http://en.wikipedia.org/wiki/GNU_General_Public_License\n */\n\n;(function ($, window, document, undefined) {\n\n    /* Defaults\n     ================================================== */\n    var pluginName = 'sharrre',\n        defaults = {\n        className: 'sharrre',\n        share: {\n            googlePlus: false,\n            facebook: false,\n            twitter: false,\n            digg: false,\n            delicious: false,\n            stumbleupon: false,\n            linkedin: false,\n            pinterest: false\n        },\n        shareTotal: 0,\n        template: '',\n        title: '',\n        url: document.location.href,\n        text: document.title,\n        urlCurl: 'sharrre.php', //PHP script for google plus...\n        count: {}, //counter by social network\n        total: 0, //total of sharing\n        shorterTotal: true, //show total by k or M when number is to big\n        enableHover: true, //disable if you want to personalize hover event with callback\n        enableCounter: true, //disable if you just want use buttons\n        enableTracking: false, //tracking with google analitycs\n        hover: function hover() {}, //personalize hover event with this callback function\n        hide: function hide() {}, //personalize hide event with this callback function\n        click: function click() {}, //personalize click event with this callback function\n        render: function render() {}, //personalize render event with this callback function\n        buttons: { //settings for buttons\n            googlePlus: { //http://www.google.com/webmasters/+1/button/\n                url: '', //if you need to personnalize button url\n                urlCount: false, //if you want to use personnalize button url on global counter\n                size: 'medium',\n                lang: 'en-US',\n                annotation: ''\n            },\n            facebook: { //http://developers.facebook.com/docs/reference/plugins/like/\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                action: 'like',\n                layout: 'button_count',\n                width: '',\n                send: 'false',\n                faces: 'false',\n                colorscheme: '',\n                font: '',\n                lang: 'en_US'\n            },\n            twitter: { //http://twitter.com/about/resources/tweetbutton\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                count: 'horizontal',\n                hashtags: '',\n                via: '',\n                related: '',\n                lang: 'en'\n            },\n            digg: { //http://about.digg.com/downloads/button/smart\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                type: 'DiggCompact'\n            },\n            delicious: {\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                size: 'medium' //medium or tall\n            },\n            stumbleupon: { //http://www.stumbleupon.com/badges/\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                layout: '1'\n            },\n            linkedin: { //http://developer.linkedin.com/plugins/share-button\n                url: '', //if you need to personalize url button\n                urlCount: false, //if you want to use personnalize button url on global counter\n                counter: ''\n            },\n            pinterest: { //http://pinterest.com/about/goodies/\n                url: '', //if you need to personalize url button\n                media: '',\n                description: '',\n                layout: 'horizontal'\n            }\n        }\n    },\n\n    /* Json URL to get count number\n     ================================================== */\n    urlJson = {\n        googlePlus: \"\",\n\n        //new FQL method by Sire\n        facebook: \"https://graph.facebook.com/fql?q=SELECT%20url,%20normalized_url,%20share_count,%20like_count,%20comment_count,%20total_count,commentsbox_count,%20comments_fbid,%20click_count%20FROM%20link_stat%20WHERE%20url=%27{url}%27&callback=?\",\n        //old method facebook: \"http://graph.facebook.com/?id={url}&callback=?\",\n        //facebook : \"http://api.ak.facebook.com/restserver.php?v=1.0&method=links.getStats&urls={url}&format=json\"\n        // Old twitter count api endpoint.\n        //twitter: \"http://cdn.api.twitter.com/1/urls/count.json?url={url}&callback=?\",\n        // Now using http://opensharecount.com/\n        twitter: \"http://opensharecount.com/count.json?url={url}\",\n        digg: \"http://services.digg.com/2.0/story.getInfo?links={url}&type=javascript&callback=?\",\n        delicious: 'http://feeds.delicious.com/v2/json/urlinfo/data?url={url}&callback=?',\n        //stumbleupon: \"http://www.stumbleupon.com/services/1.01/badge.getinfo?url={url}&format=jsonp&callback=?\",\n        stumbleupon: \"\",\n        linkedin: \"http://www.linkedin.com/countserv/count/share?format=jsonp&url={url}&callback=?\",\n        pinterest: \"http://api.pinterest.com/v1/urls/count.json?url={url}&callback=?\"\n    },\n\n    /* Load share buttons asynchronously\n     ================================================== */\n    loadButton = {\n        googlePlus: function googlePlus(self) {\n            var sett = self.options.buttons.googlePlus;\n            //$(self.element).find('.buttons').append('<div class=\"button googleplus\"><g:plusone size=\"'+self.options.buttons.googlePlus.size+'\" href=\"'+self.options.url+'\"></g:plusone></div>');\n            $(self.element).find('.buttons').append('<div class=\"button googleplus\"><div class=\"g-plusone\" data-size=\"' + sett.size + '\" data-href=\"' + (sett.url !== '' ? sett.url : self.options.url) + '\" data-annotation=\"' + sett.annotation + '\"></div></div>');\n            window.___gcfg = {\n                lang: self.options.buttons.googlePlus.lang\n            };\n            var loading = 0;\n            if (typeof gapi === 'undefined' && loading == 0) {\n                loading = 1;\n                (function () {\n                    var po = document.createElement('script');po.type = 'text/javascript';po.async = true;\n                    po.src = '//apis.google.com/js/plusone.js';\n                    var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po, s);\n                })();\n            } else {\n                gapi.plusone.go();\n            }\n        },\n        facebook: function facebook(self) {\n            var sett = self.options.buttons.facebook;\n            $(self.element).find('.buttons').append('<div class=\"button facebook\"><div id=\"fb-root\"></div><div class=\"fb-like\" data-href=\"' + (sett.url !== '' ? sett.url : self.options.url) + '\" data-send=\"' + sett.send + '\" data-layout=\"' + sett.layout + '\" data-width=\"' + sett.width + '\" data-show-faces=\"' + sett.faces + '\" data-action=\"' + sett.action + '\" data-colorscheme=\"' + sett.colorscheme + '\" data-font=\"' + sett.font + '\" data-via=\"' + sett.via + '\"></div></div>');\n            var loading = 0;\n            if (typeof FB === 'undefined' && loading == 0) {\n                loading = 1;\n                (function (d, s, id) {\n                    var js,\n                        fjs = d.getElementsByTagName(s)[0];\n                    if (d.getElementById(id)) {\n                        return;\n                    }\n                    js = d.createElement(s);js.id = id;\n                    js.src = '//connect.facebook.net/' + sett.lang + '/all.js#xfbml=1';\n                    fjs.parentNode.insertBefore(js, fjs);\n                })(document, 'script', 'facebook-jssdk');\n            } else {\n                FB.XFBML.parse();\n            }\n        },\n        twitter: function twitter(self) {\n            var sett = self.options.buttons.twitter;\n            $(self.element).find('.buttons').append('<div class=\"button twitter\"><a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"' + (sett.url !== '' ? sett.url : self.options.url) + '\" data-count=\"' + sett.count + '\" data-text=\"' + self.options.text + '\" data-via=\"' + sett.via + '\" data-hashtags=\"' + sett.hashtags + '\" data-related=\"' + sett.related + '\" data-lang=\"' + sett.lang + '\">Tweet</a></div>');\n            var loading = 0;\n            if (typeof twttr === 'undefined' && loading == 0) {\n                loading = 1;\n                (function () {\n                    var twitterScriptTag = document.createElement('script');\n                    twitterScriptTag.type = 'text/javascript';\n                    twitterScriptTag.async = true;\n                    twitterScriptTag.src = '//platform.twitter.com/widgets.js';\n                    var s = document.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(twitterScriptTag, s);\n                })();\n            } else {\n                $.ajax({ url: '//platform.twitter.com/widgets.js', dataType: 'script', cache: true }); //http://stackoverflow.com/q/6536108\n            }\n        },\n        digg: function digg(self) {\n            var sett = self.options.buttons.digg;\n            $(self.element).find('.buttons').append('<div class=\"button digg\"><a class=\"DiggThisButton ' + sett.type + '\" rel=\"nofollow external\" href=\"http://digg.com/submit?url=' + encodeURIComponent(sett.url !== '' ? sett.url : self.options.url) + '\"></a></div>');\n            var loading = 0;\n            if (typeof __DBW === 'undefined' && loading == 0) {\n                loading = 1;\n                (function () {\n                    var s = document.createElement('SCRIPT'),\n                        s1 = document.getElementsByTagName('SCRIPT')[0];\n                    s.type = 'text/javascript';\n                    s.async = true;\n                    s.src = '//widgets.digg.com/buttons.js';\n                    s1.parentNode.insertBefore(s, s1);\n                })();\n            }\n        },\n        delicious: function delicious(self) {\n            if (self.options.buttons.delicious.size == 'tall') {\n                //tall\n                var css = 'width:50px;',\n                    cssCount = 'height:35px;width:50px;font-size:15px;line-height:35px;',\n                    cssShare = 'height:18px;line-height:18px;margin-top:3px;';\n            } else {\n                //medium\n                var css = 'width:93px;',\n                    cssCount = 'float:right;padding:0 3px;height:20px;width:26px;line-height:20px;',\n                    cssShare = 'float:left;height:20px;line-height:20px;';\n            }\n            var count = self.shorterTotal(self.options.count.delicious);\n            if (typeof count === \"undefined\") {\n                count = 0;\n            }\n            $(self.element).find('.buttons').append('<div class=\"button delicious\"><div style=\"' + css + 'font:12px Arial,Helvetica,sans-serif;cursor:pointer;color:#666666;display:inline-block;float:none;height:20px;line-height:normal;margin:0;padding:0;text-indent:0;vertical-align:baseline;\">' + '<div style=\"' + cssCount + 'background-color:#fff;margin-bottom:5px;overflow:hidden;text-align:center;border:1px solid #ccc;border-radius:3px;\">' + count + '</div>' + '<div style=\"' + cssShare + 'display:block;padding:0;text-align:center;text-decoration:none;width:50px;background-color:#7EACEE;border:1px solid #40679C;border-radius:3px;color:#fff;\">' + '<img src=\"http://www.delicious.com/static/img/delicious.small.gif\" height=\"10\" width=\"10\" alt=\"Delicious\" /> Add</div></div></div>');\n\n            $(self.element).find('.delicious').on('click', function () {\n                self.openPopup('delicious');\n            });\n        },\n        stumbleupon: function stumbleupon(self) {\n            var sett = self.options.buttons.stumbleupon;\n            $(self.element).find('.buttons').append('<div class=\"button stumbleupon\"><su:badge layout=\"' + sett.layout + '\" location=\"' + (sett.url !== '' ? sett.url : self.options.url) + '\"></su:badge></div>');\n            var loading = 0;\n            if (typeof STMBLPN === 'undefined' && loading == 0) {\n                loading = 1;\n                (function () {\n                    var li = document.createElement('script');li.type = 'text/javascript';li.async = true;\n                    li.src = '//platform.stumbleupon.com/1/widgets.js';\n                    var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(li, s);\n                })();\n                s = window.setTimeout(function () {\n                    if (typeof STMBLPN !== 'undefined') {\n                        STMBLPN.processWidgets();\n                        clearInterval(s);\n                    }\n                }, 500);\n            } else {\n                STMBLPN.processWidgets();\n            }\n        },\n        linkedin: function linkedin(self) {\n            var sett = self.options.buttons.linkedin;\n            $(self.element).find('.buttons').append('<div class=\"button linkedin\"><script type=\"in/share\" data-url=\"' + (sett.url !== '' ? sett.url : self.options.url) + '\" data-counter=\"' + sett.counter + '\"></script></div>');\n            var loading = 0;\n            if (typeof window.IN === 'undefined' && loading == 0) {\n                loading = 1;\n                (function () {\n                    var li = document.createElement('script');li.type = 'text/javascript';li.async = true;\n                    li.src = '//platform.linkedin.com/in.js';\n                    var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(li, s);\n                })();\n            } else {\n                window.IN.init();\n            }\n        },\n        pinterest: function pinterest(self) {\n            var sett = self.options.buttons.pinterest;\n            $(self.element).find('.buttons').append('<div class=\"button pinterest\"><a href=\"http://pinterest.com/pin/create/button/?url=' + (sett.url !== '' ? sett.url : self.options.url) + '&media=' + sett.media + '&description=' + sett.description + '\" class=\"pin-it-button\" count-layout=\"' + sett.layout + '\">Pin It</a></div>');\n\n            (function () {\n                var li = document.createElement('script');li.type = 'text/javascript';li.async = true;\n                li.src = '//assets.pinterest.com/js/pinit.js';\n                var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(li, s);\n            })();\n        }\n    },\n\n    /* Tracking for Google Analytics\n     ================================================== */\n    tracking = {\n        googlePlus: function googlePlus() {},\n        facebook: function facebook() {\n            //console.log('facebook');\n            fb = window.setInterval(function () {\n                if (typeof FB !== 'undefined') {\n                    FB.Event.subscribe('edge.create', function (targetUrl) {\n                        _gaq.push(['_trackSocial', 'facebook', 'like', targetUrl]);\n                    });\n                    FB.Event.subscribe('edge.remove', function (targetUrl) {\n                        _gaq.push(['_trackSocial', 'facebook', 'unlike', targetUrl]);\n                    });\n                    FB.Event.subscribe('message.send', function (targetUrl) {\n                        _gaq.push(['_trackSocial', 'facebook', 'send', targetUrl]);\n                    });\n                    //console.log('ok');\n                    clearInterval(fb);\n                }\n            }, 1000);\n        },\n        twitter: function twitter() {\n            //console.log('twitter');\n            tw = window.setInterval(function () {\n                if (typeof twttr !== 'undefined') {\n                    twttr.events.bind('tweet', function (event) {\n                        if (event) {\n                            _gaq.push(['_trackSocial', 'twitter', 'tweet']);\n                        }\n                    });\n                    //console.log('ok');\n                    clearInterval(tw);\n                }\n            }, 1000);\n        },\n        digg: function digg() {\n            //if somenone find a solution, mail me !\n            /*$(this.element).find('.digg').on('click', function(){\n             _gaq.push(['_trackSocial', 'digg', 'add']);\n             });*/\n        },\n        delicious: function delicious() {},\n        stumbleupon: function stumbleupon() {},\n        linkedin: function linkedin() {\n            function LinkedInShare() {\n                _gaq.push(['_trackSocial', 'linkedin', 'share']);\n            }\n        },\n        pinterest: function pinterest() {\n            //if somenone find a solution, mail me !\n        }\n    },\n\n    /* Popup for each social network\n     ================================================== */\n    popup = {\n        googlePlus: function googlePlus(opt) {\n            window.open(\"https://plus.google.com/share?hl=\" + opt.buttons.googlePlus.lang + \"&url=\" + encodeURIComponent(opt.buttons.googlePlus.url !== '' ? opt.buttons.googlePlus.url : opt.url), \"\", \"toolbar=0, status=0, width=900, height=500\");\n        },\n        facebook: function facebook(opt) {\n            window.open(\"http://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(opt.buttons.facebook.url !== '' ? opt.buttons.facebook.url : opt.url) + \"&t=\" + opt.text + \"\", \"\", \"toolbar=0, status=0, width=900, height=500\");\n        },\n        twitter: function twitter(opt) {\n            window.open(\"https://twitter.com/intent/tweet?text=\" + encodeURIComponent(opt.text) + \"&url=\" + encodeURIComponent(opt.buttons.twitter.url !== '' ? opt.buttons.twitter.url : opt.url) + (opt.buttons.twitter.via !== '' ? '&via=' + opt.buttons.twitter.via : ''), \"\", \"toolbar=0, status=0, width=650, height=360\");\n        },\n        digg: function digg(opt) {\n            window.open(\"http://digg.com/tools/diggthis/submit?url=\" + encodeURIComponent(opt.buttons.digg.url !== '' ? opt.buttons.digg.url : opt.url) + \"&title=\" + opt.text + \"&related=true&style=true\", \"\", \"toolbar=0, status=0, width=650, height=360\");\n        },\n        delicious: function delicious(opt) {\n            window.open('http://www.delicious.com/save?v=5&noui&jump=close&url=' + encodeURIComponent(opt.buttons.delicious.url !== '' ? opt.buttons.delicious.url : opt.url) + '&title=' + opt.text, 'delicious', 'toolbar=no,width=550,height=550');\n        },\n        stumbleupon: function stumbleupon(opt) {\n            window.open('http://www.stumbleupon.com/badge/?url=' + encodeURIComponent(opt.buttons.stumbleupon.url !== '' ? opt.buttons.stumbleupon.url : opt.url), 'stumbleupon', 'toolbar=no,width=550,height=550');\n        },\n        linkedin: function linkedin(opt) {\n            window.open('https://www.linkedin.com/cws/share?url=' + encodeURIComponent(opt.buttons.linkedin.url !== '' ? opt.buttons.linkedin.url : opt.url) + '&token=&isFramed=true', 'linkedin', 'toolbar=no,width=550,height=550');\n        },\n        pinterest: function pinterest(opt) {\n            window.open('http://pinterest.com/pin/create/button/?url=' + encodeURIComponent(opt.buttons.pinterest.url !== '' ? opt.buttons.pinterest.url : opt.url) + '&media=' + encodeURIComponent(opt.buttons.pinterest.media) + '&description=' + opt.buttons.pinterest.description, 'pinterest', 'toolbar=no,width=700,height=300');\n        }\n    };\n\n    /* Plugin constructor\n     ================================================== */\n    function Plugin(element, options) {\n        this.element = element;\n\n        this.options = $.extend(true, {}, defaults, options);\n        this.options.share = options.share; //simple solution to allow order of buttons\n\n        this._defaults = defaults;\n        this._name = pluginName;\n\n        this.init();\n    };\n\n    /* Initialization method\n     ================================================== */\n    Plugin.prototype.init = function () {\n        var self = this;\n        if (this.options.urlCurl !== '') {\n            urlJson.googlePlus = this.options.urlCurl + '?url={url}&type=googlePlus'; // PHP script for GooglePlus...\n            urlJson.stumbleupon = this.options.urlCurl + '?url={url}&type=stumbleupon'; // PHP script for Stumbleupon...\n        }\n        $(this.element).addClass(this.options.className); //add class\n\n        //HTML5 Custom data\n        if (typeof $(this.element).data('title') !== 'undefined') {\n            this.options.title = $(this.element).attr('data-title');\n        }\n        if (typeof $(this.element).data('url') !== 'undefined') {\n            this.options.url = $(this.element).data('url');\n        }\n        if (typeof $(this.element).data('text') !== 'undefined') {\n            this.options.text = $(this.element).data('text');\n        }\n\n        //how many social website have been selected\n        $.each(this.options.share, function (name, val) {\n            if (val === true) {\n                self.options.shareTotal++;\n            }\n        });\n\n        if (self.options.enableCounter === true) {\n            //if for some reason you don't need counter\n            //get count of social share that have been selected\n            $.each(this.options.share, function (name, val) {\n                if (val === true) {\n                    //self.getSocialJson(name);\n                    try {\n                        self.getSocialJson(name);\n                    } catch (e) {}\n                }\n            });\n        } else if (self.options.template !== '') {\n            //for personalized button (with template)\n            this.options.render(this, this.options);\n        } else {\n            // if you want to use official button like example 3 or 5\n            this.loadButtons();\n        }\n\n        //add hover event\n        $(this.element).hover(function () {\n            //load social button if enable and 1 time\n            if ($(this).find('.buttons').length === 0 && self.options.enableHover === true) {\n                self.loadButtons();\n            }\n            self.options.hover(self, self.options);\n        }, function () {\n            self.options.hide(self, self.options);\n        });\n\n        //click event\n        $(this.element).click(function () {\n            self.options.click(self, self.options);\n            return false;\n        });\n    };\n\n    /* loadButtons methode\n     ================================================== */\n    Plugin.prototype.loadButtons = function () {\n        var self = this;\n        $(this.element).append('<div class=\"buttons\"></div>');\n        $.each(self.options.share, function (name, val) {\n            if (val == true) {\n                loadButton[name](self);\n                if (self.options.enableTracking === true) {\n                    //add tracking\n                    tracking[name]();\n                }\n            }\n        });\n    };\n\n    /* getSocialJson methode\n     ================================================== */\n    Plugin.prototype.getSocialJson = function (name) {\n        var self = this,\n            count = 0,\n            url = urlJson[name].replace('{url}', encodeURIComponent(this.options.url));\n        if (this.options.buttons[name].urlCount === true && this.options.buttons[name].url !== '') {\n            url = urlJson[name].replace('{url}', this.options.buttons[name].url);\n        }\n        //console.log('name : ' + name + ' - url : '+url); //debug\n        if (url != '' && self.options.urlCurl !== '') {\n            //urlCurl = '' if you don't want to used PHP script but used social button\n            $.getJSON(url, function (json) {\n                if (typeof json.count !== \"undefined\") {\n                    //GooglePlus, Stumbleupon, Twitter, Pinterest and Digg\n                    var temp = json.count + '';\n                    temp = temp.replace('\\xC2\\xA0', ''); //remove google plus special chars\n                    count += parseInt(temp, 10);\n                }\n                //get the FB total count (shares, likes and more)\n                else if (json.data && json.data.length > 0 && typeof json.data[0].total_count !== \"undefined\") {\n                        //Facebook total count\n                        count += parseInt(json.data[0].total_count, 10);\n                    } else if (typeof json[0] !== \"undefined\") {\n                        //Delicious\n                        count += parseInt(json[0].total_posts, 10);\n                    } else if (typeof json[0] !== \"undefined\") {//Stumbleupon\n                    }\n                self.options.count[name] = count;\n                self.options.total += count;\n                self.renderer();\n                self.rendererPerso();\n                //console.log(json); //debug\n            }).error(function () {\n                self.options.count[name] = 0;\n                self.rendererPerso();\n            });\n        } else {\n            self.renderer();\n            self.options.count[name] = 0;\n            self.rendererPerso();\n        }\n    };\n\n    /* launch render methode\n     ================================================== */\n    Plugin.prototype.rendererPerso = function () {\n        //check if this is the last social website to launch render\n        var shareCount = 0;\n        for (e in this.options.count) {\n            shareCount++;\n        }\n        if (shareCount === this.options.shareTotal) {\n            this.options.render(this, this.options);\n        }\n    };\n\n    /* render methode\n     ================================================== */\n    Plugin.prototype.renderer = function () {\n        var total = this.options.total,\n            template = this.options.template;\n        if (this.options.shorterTotal === true) {\n            //format number like 1.2k or 5M\n            total = this.shorterTotal(total);\n        }\n\n        if (template !== '') {\n            //if there is a template\n            template = template.replace('{total}', total);\n            $(this.element).html(template);\n        } else {\n            //template by defaults\n            $(this.element).html('<div class=\"box\"><a class=\"count\" href=\"#\">' + total + '</a>' + (this.options.title !== '' ? '<a class=\"share\" href=\"#\">' + this.options.title + '</a>' : '') + '</div>');\n        }\n    };\n\n    /* format total numbers like 1.2k or 5M\n     ================================================== */\n    Plugin.prototype.shorterTotal = function (num) {\n        if (num >= 1e6) {\n            num = (num / 1e6).toFixed(2) + \"M\";\n        } else if (num >= 1e3) {\n            num = (num / 1e3).toFixed(1) + \"k\";\n        }\n        return num;\n    };\n\n    /* Methode for open popup\n     ================================================== */\n    Plugin.prototype.openPopup = function (site) {\n        popup[site](this.options); //open\n        if (this.options.enableTracking === true) {\n            //tracking!\n            var tracking = {\n                googlePlus: { site: 'Google', action: '+1' },\n                facebook: { site: 'facebook', action: 'like' },\n                twitter: { site: 'twitter', action: 'tweet' },\n                digg: { site: 'digg', action: 'add' },\n                delicious: { site: 'delicious', action: 'add' },\n                stumbleupon: { site: 'stumbleupon', action: 'add' },\n                linkedin: { site: 'linkedin', action: 'share' },\n                pinterest: { site: 'pinterest', action: 'pin' }\n            };\n            _gaq.push(['_trackSocial', tracking[site].site, tracking[site].action]);\n        }\n    };\n\n    /* Methode for add +1 to a counter\n     ================================================== */\n    Plugin.prototype.simulateClick = function () {\n        var html = $(this.element).html();\n        $(this.element).html(html.replace(this.options.total, this.options.total + 1));\n    };\n\n    /* Methode for add +1 to a counter\n     ================================================== */\n    Plugin.prototype.update = function (url, text) {\n        if (url !== '') {\n            this.options.url = url;\n        }\n        if (text !== '') {\n            this.options.text = text;\n        }\n    };\n\n    /* A really lightweight plugin wrapper around the constructor, preventing against multiple instantiations\n     ================================================== */\n    $.fn[pluginName] = function (options) {\n        var args = arguments;\n        if (options === undefined || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            return this.each(function () {\n                if (!$.data(this, 'plugin_' + pluginName)) {\n                    $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n                }\n            });\n        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n            return this.each(function () {\n                var instance = $.data(this, 'plugin_' + pluginName);\n                if (instance instanceof Plugin && typeof instance[options] === 'function') {\n                    instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n                }\n            });\n        }\n    };\n})(jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/source/plugins.js\n");}),1:(function(module,exports,__webpack_require__){module.exports=__webpack_require__("./js/source/plugins.js");})});